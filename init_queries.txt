-- جدول کاربران
CREATE TABLE User (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(100),
    age INT
);

-- جدول لیست‌ها
CREATE TABLE Lists (
    list_id INT AUTO_INCREMENT PRIMARY KEY,
    list_name VARCHAR(100) NOT NULL,
    access ENUM('private', 'public') NOT NULL,
    type ENUM('download_list', 'watchlist', 'watched_list') NOT NULL
);

-- جدول امتیازات
CREATE TABLE Rating (
    rating_id INT AUTO_INCREMENT PRIMARY KEY,
    rating_value DECIMAL(3, 1) NOT NULL CHECK (rating_value BETWEEN 0 AND 10),
    rating_text TEXT
);

-- جدول افراد
CREATE TABLE Person (
    person_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL
);

-- جدول فیلم‌ها
CREATE TABLE Movie (
    movie_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    genre VARCHAR(100),
    revenue DECIMAL(15, 2),
    release_date DATE,
    imdb_rating DECIMAL(3, 1) CHECK (imdb_rating BETWEEN 0 AND 10)
);

-- جدول شرکت‌ها
CREATE TABLE Company (
    company_id INT AUTO_INCREMENT PRIMARY KEY,
    legal_name VARCHAR(200) NOT NULL
);

-- جدول ارتباط User و List
CREATE TABLE User_List (
    user_id INT NOT NULL,
    list_id INT NOT NULL,
    type ENUM('download_list', 'watchlist', 'watched_list') NOT NULL,
    UNIQUE (user_id, list_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id),
    FOREIGN KEY (list_id) REFERENCES Lists(list_id),
    CHECK (
        (type != 'download_list' OR (user_id, type) IN (SELECT user_id, 'download_list' FROM User_List)) = FALSE
        OR
        (type != 'watched_list' OR (user_id, type) IN (SELECT user_id, 'watched_list' FROM User_List)) = FALSE
    )
);

-- جدول ارتباط User و Rating
CREATE TABLE User_Rating (
    user_id INT NOT NULL,
    rating_id INT NOT NULL,
    date_created DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, rating_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE,
    FOREIGN KEY (rating_id) REFERENCES Rating(rating_id) ON DELETE CASCADE
);

-- جدول ارتباط Movie و List
CREATE TABLE Movie_List (
    movie_id INT NOT NULL,
    list_id INT NOT NULL,
    date_added DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (movie_id, list_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (list_id) REFERENCES Lists(list_id) ON DELETE CASCADE
);

-- جدول ارتباط Movie و Company
CREATE TABLE Movie_Company (
    movie_id INT NOT NULL,
    company_id INT NOT NULL,
    PRIMARY KEY (movie_id, company_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (company_id) REFERENCES Company(company_id) ON DELETE CASCADE
);

-- جدول ارتباط Movie و Person
CREATE TABLE Movie_Person (
    movie_id INT NOT NULL,
    person_id INT NOT NULL,
    role VARCHAR(50) NOT NULL,
    PRIMARY KEY (movie_id, person_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (person_id) REFERENCES Person(person_id) ON DELETE CASCADE
);

-- جدول ارتباط Movie و Rating
CREATE TABLE Movie_Rating (
    movie_id INT NOT NULL,
    rating_id INT NOT NULL,
    PRIMARY KEY (movie_id, rating_id),
    FOREIGN KEY (movie_id) REFERENCES Movie(movie_id) ON DELETE CASCADE,
    FOREIGN KEY (rating_id) REFERENCES Rating(rating_id) ON DELETE CASCADE
);
